Curso de GIT

1- ver la versión de GIT
git version
2. para clonar o descargar un repositorio de un servidor(github, gitlab, bitbucker)
git clone [url del repositorio]
ejemplo
git clone https://github.com/SENA-CEET/1803182G1-Trimestre-1.git


3. configurar el usuario y el correo para hacer manejar GIT
git config --global user.mail "correo electronico"
git config --global user.name "nombre usuario"

4. limpiar pantalla
clear

5. pasar los archivos del modified a staged
git add [archivo]
git add .

6. para ver el estado del repositorio
git status

7. para pasar archivos del area de preparación(staging area) a confirmación(committed area)
git commit //este me abre el editor de texto por defecto
git commit -m "mensaje del commit"

8. inicializar un repositorio
git init

9. para ver los commits
git log

10. para ver la configuración de git
git config --list
git config -l

11. para ver la diferencia entre cambios a nivel de archivo o contenido
git diff
git diff --staged // muestra los cambios que estan en el area de preparación(staggind area)
git diff --chached // muestra lo que esta en el area de preparación

12. hacer un commit de lo que esta en el de todo lo que esta con seguimiento sin importar el area
git commit -a -m 'added new benchmarks'

13. borrar un archivo y dejar ese delete en el area de preparación
git rm [nombre archivo]
git rm -f [nombre archivo ] para borrar el archivo si esa en el area de preparación

14. cambiar el nombre de una archivo que esta en el area de preparación
git mv [nombre archivo viejo] [nombre archivo nuevo]

15. ver confirmaciones
git log
git log -p sirve para ver todos los cambios de cada archivo al detalle ademas de todos los commits
git log [checksum commit] -p para ver los cambios de un commit especifico
git log -p -[numero] muestra los cambios de los archivo dependediendo el numero de commits que se le solicita
git log --stat muestra estadisticas de los commits
git log --pretty=oneline
git log --graph muestra una grafica de los commits y los branch

Opción	Descripción para git log
-p
Muestra el parche introducido en cada confirmación.

--stat
Muestra estadísticas sobre los archivos modificados en cada confirmación.

--shortstat
Muestra solamente la línea de resumen de la opción --stat.

--name-only
Muestra la lista de archivos afectados.

--name-status
Muestra la lista de archivos afectados, indicando además si fueron añadidos, modificados o eliminados.

--abbrev-commit
Muestra solamente los primeros caracteres de la suma SHA-1, en vez de los 40 caracteres de que se compone.

--relative-date
Muestra la fecha en formato relativo (por ejemplo, “2 weeks ago” (“hace 2 semanas”)) en lugar del formato completo.

--graph
Muestra un gráfico ASCII con la historia de ramificaciones y uniones.

--pretty
Muestra las confirmaciones usando un formato alternativo. Posibles opciones sonlineon oneline, short, full, fuller y format (mediante el cual puedes especificar tu propio formato).

--since
Muestra el log de los commits desde una fecha especifica hasta la fecha actual

--untill
Muestra una log de los commits desde el inicio hasta la fecha buscada

-all-match
Ten en cuenta que si quieres aplicar las dos opciones anteriores simultáneamente, tienes que añadir

16. commit con coauthor
en el mensaje del commit se debe colocar
Co-authored-by: name <name@example.com>

17. problemas con usuario
BORRAR LAS CREDENCIALES DE LOS USUARIOS abrir el cmd 
Ubicarse en la ruta C:\Program Files\Git\mingw64\libexec\git-core y ejecutar el comando git-credential-manager.exe uninstall

18- borrar la configuración de git
eliminar el archivo .gitconfig que se encuentra en la ruta usuario c:/user/[nombre usuario]

19. para pasar un archivo del area de preparación a working tree
git reset
OJO: se puede perder información del area de preparación

20. 
git config --global credential.helper store // para que almacene las CREDENCIALES
git config --global credential.helper default // para que no almacene las CREDENCIALES

21 modificar el ultimo commit
git commit --amend

22. repurar el working tree
git reset HEAD [nombre archivo] // ojo para este debe haber hecho un commit
git rm --cached [nombre archivo] -f // ojo que no se hayan hecho commit

23. recuperar el area preparacion
git checkout -- [nombre archivo]

24. quiero eliminar commits
git reset [hash del commit] --hard // elimina todo el working tree
git reset [hash del commit] --mixed // elimina los commits y los archivos quedan en el working tree
git reset [hash del commit] --soft // elimina los commits y los archivos de que estaban en lo commits los deja en area de preparación

25. para ver los remotos
git remote // listar los remotos
git remote add [nombre remoto] [url del remoto] // adicionar un remoto externo
git remote -v // para ver los remotos y las urls

26. para traer y convinar los remotos
git fetch [nombre remoto] [rama] //traer la base de datos de git NOTA: toca combinar a mano
git pull [nombre remoto] [rama] // traey y fusiona las ramas NOTA: combina automaticamente si puede si no toca a mano

27. enviar repositorios
git push // manda el repositorio por defecto que es el origin
git push [nombre remoto] [rama]

28. etiquetas (tag)
git tag
git tag -l // lista los tags
git tag -a [version] -m [mensaje de la versión]
git tag -a [version] // me manda al vim para agregar el mensaje
git show [version] // muestra la información de la versión
git tag -d [versión] // borra la tag
git tag -f -a [version] [checksum] -m [mensaje] // crear una nueva etiqueta en un commit especifico 
git push [remoto] [tag] // push de la tag
git push --delete [remoto] [tag]
git push --tags // envia todas etiquetas
git checkout [version] // para pasarme a la etiquetas
git checkout -b [branch] [version] // crea un branch con el codigo que estaba en la etiqueta
